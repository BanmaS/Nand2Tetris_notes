// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 判断指令最高位是A还是C指令
    // A指令：最高位为0，则直接把指令存进A寄存器，此时outM输出的也是A
    // C指令，最高位为1
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=inA);
    // 判断是否存进A寄存器：instruction[15]==0 or d1==1
    Not(in=instruction[15], out=n15);
    Or(a=n15, b=instruction[5], out=loadA);
    // 这里如果instruction[15]==1,loadA==0,则为C指令，A寄存器的值不会变
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    // 判断是否存进D寄存器，instruction[15]==1&d2==1
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=outD);
    // 判断是否存进M: instruction[15]==1&d3==1
    And(a=instruction[15], b=instruction[3], out=writeM);
    // C指令的情况下，通过a位域(instruction[12])判断把A输入ALU还是M输入ALU
    And(a=instruction[15], b=instruction[12], out=c1);
    // 把A或M(inM)的值输入ALU
    Mux16(a=outA, b=inM, sel=c1, out=ALUin);
    // c位域和ALU的六个输入一一映射
    // 这里刚开始没想明白，后来懂了，如果此时是A指令，那么writeM==0，
    // outM的输出不会被写到M里，没意义
    And(a = instruction[15], b = instruction[11], out = zx);
    And(a = instruction[15], b = instruction[10], out = nx);
    And(a = instruction[15], b = instruction[9], out = zy);
    And(a = instruction[15], b = instruction[8], out = ny);
    And(a = instruction[15], b = instruction[7], out = f);
    And(a = instruction[15], b = instruction[6], out = no);
    ALU(x=outD, y=ALUin, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUout, out=outM, zr=zr, ng=ng);
    // 跳转判断
    // (j1&ng)||(j2&zr)||(j3&!(ng||zr))==1则跳转
    // 需要判断是不是C指令
    And(a=ng, b=instruction[2], out=j1ng);
    And(a=zr, b=instruction[1], out=j2zr);
    Or(a=ng, b=zr, out=ngzr);
    Not(in=ngzr, out=Nngzr);
    And(a=Nngzr, b=instruction[0], out=j3nz);
    Or(a=j1ng, b=j2zr, out=j12);
    Or(a=j12, b=j3nz, out=tempjp);
    And(a=instruction[15], b=tempjp, out=jp);
    PC(in=outA, load=jp, inc=true, reset=reset, out[0..14]=pc);
}